{"title":"Pyright","type":"object","properties":{"pyright.disableOrganizeImports":{"scope":"resource","type":"boolean","description":"Disables the “Organize Imports” command.","default":false},"python.analysis.autoSearchPaths":{"scope":"resource","type":"boolean","description":"Automatically add common search paths like 'src'?","default":true},"python.analysis.extraPaths":{"scope":"resource","default":[],"description":"Additional import search resolution paths","type":"array","items":{"type":"string"}},"python.analysis.stubPath":{"scope":"resource","type":"string","description":"Path to directory containing custom type stub files.","default":"typings"},"python.analysis.diagnosticMode":{"enumDescriptions":["Analyzes and reports errors on only open files.","Analyzes and reports errors on all files in the workspace."],"scope":"resource","type":"string","default":"openFilesOnly","enum":["openFilesOnly","workspace"]},"python.analysis.include":{"scope":"resource","default":[],"description":"Paths of directories or files that should be included. If no paths are specified, pyright defaults to the workspace root directory. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character).","type":"array","items":{"type":"string"}},"python.analysis.exclude":{"scope":"resource","default":[],"description":"Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. Note that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no exclude paths are specified, pyright automatically excludes the following: `**\/node_modules`, `**\/__pycache__`, `.git` and any virtual environment directories.","type":"array","items":{"type":"string"}},"python.analysis.ignore":{"scope":"resource","default":[],"description":"Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no value is provided, the value of python.linting.ignorePatterns (if set) will be used.","type":"array","items":{"type":"string"}},"python.analysis.logLevel":{"enum":["Error","Warning","Information","Trace"],"type":"string","description":"Specifies the level of logging for the Output panel","default":"Information"},"python.analysis.typeCheckingMode":{"scope":"resource","default":"standard","description":"Defines the default rule set for type checking.","type":"string","enum":["off","basic","standard","strict"]},"python.analysis.typeshedPaths":{"scope":"resource","default":[],"description":"Paths to look for typeshed modules.","type":"array","items":{"type":"string"}},"python.venvPath":{"scope":"resource","type":"string","description":"Path to folder with a list of Virtual Environments.","default":""},"python.analysis.useLibraryCodeForTypes":{"scope":"resource","type":"boolean","description":"Use library implementations to extract type information when type stub is not present.","default":true},"python.pythonPath":{"scope":"resource","type":"string","description":"Path to Python, you can use a custom version of Python.","default":"python"},"pyright.disableLanguageServices":{"scope":"resource","type":"boolean","description":"Disables type completion, definitions, and references.","default":false},"python.analysis.diagnosticSeverityOverrides":{"properties":{"reportUntypedClassDecorator":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for class decorators that have no type annotations. These obscure the class type, defeating many type analysis features.","type":["string","boolean"],"default":"none"},"reportUntypedBaseClass":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for base classes whose type cannot be determined statically. These obscure the class type, defeating many type analysis features.","type":["string","boolean"],"default":"none"},"reportUntypedNamedTuple":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics when “namedtuple” is used rather than “NamedTuple”. The former contains no type information, whereas the latter does.","type":["string","boolean"],"default":"none"},"reportPrivateUsage":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for incorrect usage of private or protected variables or functions. Protected class members begin with a single underscore _ and can be accessed only by subclasses. Private class members begin with a double underscore but do not end in a double underscore and can be accessed only within the declaring class. Variables and functions declared outside of a class are considered private if their names start with either a single or double underscore, and they cannot be accessed outside of the declaring module.","type":["string","boolean"],"default":"none"},"reportTypeCommentUsage":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for usage of deprecated type comments.","type":["string","boolean"],"default":"none"},"reportPrivateImportUsage":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for incorrect usage of symbol imported from a \"py.typed\" module that is not re-exported from that module.","type":["string","boolean"],"default":"error"},"reportConstantRedefinition":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for attempts to redefine variables whose names are all-caps with underscores and numerals.","type":["string","boolean"],"default":"none"},"reportDeprecated":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for use of deprecated classes or functions.","type":["string","boolean"],"default":"none"},"reportIncompatibleMethodOverride":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for methods that override a method of the same name in a base class in an incompatible manner (wrong number of parameters, incompatible parameter types, or incompatible return type).","type":["string","boolean"],"default":"error"},"reportIncompatibleVariableOverride":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for overrides in subclasses that redefine a variable in an incompatible way.","type":["string","boolean"],"default":"error"},"reportInconsistentConstructor":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for __init__ and __new__ methods whose signatures are inconsistent.","type":["string","boolean"],"default":"none"},"reportOverlappingOverload":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for function overloads that overlap in signature and obscure each other or have incompatible return types.","type":["string","boolean"],"default":"error"},"reportPossiblyUnboundVariable":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for the use of variables that may be unbound on some code paths.","type":["string","boolean"],"default":"error"},"reportMissingSuperCall":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for missing call to parent class for inherited `__init__` methods.","type":["string","boolean"],"default":"none"},"reportUninitializedInstanceVariable":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for instance variables that are not declared or initialized within class body or `__init__` method.","type":["string","boolean"],"default":"none"},"reportInvalidStringEscapeSequence":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for invalid escape sequences used within string literals. The Python specification indicates that such sequences will generate a syntax error in future versions.","type":["string","boolean"],"default":"warning"},"reportUnknownParameterType":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for input or return parameters for functions or methods that have an unknown type.","type":["string","boolean"],"default":"none"},"reportUnknownArgumentType":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for call arguments for functions or methods that have an unknown type.","type":["string","boolean"],"default":"none"},"reportUnknownLambdaType":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for input or return parameters for lambdas that have an unknown type.","type":["string","boolean"],"default":"none"},"reportUnknownVariableType":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for variables that have an unknown type..","type":["string","boolean"],"default":"none"},"reportUnknownMemberType":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for class or instance variables that have an unknown type.","type":["string","boolean"],"default":"none"},"reportMissingParameterType":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for parameters that are missing a type annotation.","type":["string","boolean"],"default":"none"},"reportMissingTypeArgument":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for generic class reference with missing type arguments.","type":["string","boolean"],"default":"none"},"reportInvalidTypeVarUse":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for improper use of type variables in a function signature.","type":["string","boolean"],"default":"warning"},"reportCallInDefaultInitializer":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for function calls within a default value initialization expression. Such calls can mask expensive operations that are performed at module initialization time.","type":["string","boolean"],"default":"none"},"reportUnnecessaryIsInstance":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for 'isinstance' or 'issubclass' calls where the result is statically determined to be always true. Such calls are often indicative of a programming error.","type":["string","boolean"],"default":"none"},"reportGeneralTypeIssues":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for general type inconsistencies, unsupported operations, argument\/parameter mismatches, etc. Covers all of the basic type-checking rules not covered by other rules. Does not include syntax errors.","type":["string","boolean"],"default":"error"},"reportUnnecessaryComparison":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for '==' and '!=' comparisons that are statically determined to be unnecessary. Such calls are sometimes indicative of a programming error.","type":["string","boolean"],"default":"none"},"reportPropertyTypeMismatch":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for property whose setter and getter have mismatched types.","type":["string","boolean"],"default":"none"},"reportUnnecessaryContains":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for 'in' operation that is statically determined to be unnecessary. Such operations are sometimes indicative of a programming error.","type":["string","boolean"],"default":"none"},"reportFunctionMemberAccess":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for member accesses on functions.","type":["string","boolean"],"default":"error"},"reportAssertAlwaysTrue":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for 'assert' statement that will provably always assert. This can be indicative of a programming error.","type":["string","boolean"],"default":"warning"},"reportMissingImports":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for imports that have no corresponding imported python file or type stub file.","type":["string","boolean"],"default":"error"},"reportSelfClsParameterName":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for a missing or misnamed “self” parameter in instance methods and “cls” parameter in class methods. Instance methods in metaclasses (classes that derive from “type”) are allowed to use “cls” for instance methods.","type":["string","boolean"],"default":"warning"},"reportMissingModuleSource":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for imports that have no corresponding source file. This happens when a type stub is found, but the module source file was not found, indicating that the code may fail at runtime when using this execution environment. Type checking will be done using the type stub.","type":["string","boolean"],"default":"warning"},"reportImplicitStringConcatenation":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for two or more string literals that follow each other, indicating an implicit concatenation. This is considered a bad practice and often masks bugs such as missing commas.","type":["string","boolean"],"default":"none"},"reportInvalidTypeForm":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for type expression that uses an invalid form.","type":["string","boolean"],"default":"error"},"reportInvalidStubStatement":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for type stub statements that do not conform to PEP 484.","type":["string","boolean"],"default":"none"},"reportMissingTypeStubs":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for imports that have no corresponding type stub file (either a typeshed file or a custom type stub). The type checker requires type stubs to do its best job at analysis.","type":["string","boolean"],"default":"none"},"reportIncompleteStub":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for the use of a module-level “__getattr__” function, indicating that the stub is incomplete.","type":["string","boolean"],"default":"none"},"reportImportCycles":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for cyclical import chains. These are not errors in Python, but they do slow down type analysis and often hint at architectural layering issues. Generally, they should be avoided.","type":["string","boolean"],"default":"none"},"reportUndefinedVariable":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for undefined variables.","type":["string","boolean"],"default":"error"},"reportUnusedImport":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for an imported symbol that is not referenced within that file.","type":["string","boolean"],"default":"none"},"reportUnboundVariable":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for the use of unbound variables.","type":["string","boolean"],"default":"error"},"reportUnusedClass":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for a class with a private name (starting with an underscore) that is not accessed.","type":["string","boolean"],"default":"none"},"reportUnusedFunction":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for a function or method with a private name (starting with an underscore) that is not accessed.","type":["string","boolean"],"default":"none"},"reportUnusedVariable":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for a variable that is not accessed.","type":["string","boolean"],"default":"none"},"reportDuplicateImport":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for an imported symbol or module that is imported more than once.","type":["string","boolean"],"default":"none"},"reportWildcardImportFromLibrary":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for an wildcard import from an external library.","type":["string","boolean"],"default":"warning"},"reportAbstractUsage":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for an attempt to instantiate an abstract or protocol class or use an abstract method.","type":["string","boolean"],"default":"error"},"reportArgumentType":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for a type incompatibility for an argument to a call.","type":["string","boolean"],"default":"error"},"reportAssertTypeFailure":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for a type incompatibility detected by a typing.assert_type call.","type":["string","boolean"],"default":"error"},"reportAssignmentType":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for type incompatibilities for assignments.","type":["string","boolean"],"default":"error"},"reportAttributeAccessIssue":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for issues involving attribute accesses.","type":["string","boolean"],"default":"error"},"reportCallIssue":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for issues involving call expressions and arguments.","type":["string","boolean"],"default":"error"},"reportInconsistentOverload":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for inconsistencies between function overload signatures and implementation.","type":["string","boolean"],"default":"error"},"reportIndexIssue":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics related to index operations and expressions.","type":["string","boolean"],"default":"error"},"reportInvalidTypeArguments":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for invalid type argument usage.","type":["string","boolean"],"default":"error"},"reportNoOverloadImplementation":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for an overloaded function or method with a missing implementation.","type":["string","boolean"],"default":"error"},"reportOperatorIssue":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for related to unary or binary operators.","type":["string","boolean"],"default":"error"},"reportOptionalSubscript":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for an attempt to subscript (index) a variable with an Optional type.","type":["string","boolean"],"default":"error"},"reportOptionalMemberAccess":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for an attempt to access a member of a variable with an Optional type.","type":["string","boolean"],"default":"error"},"reportOptionalCall":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for an attempt to call a variable with an Optional type.","type":["string","boolean"],"default":"error"},"reportOptionalIterable":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for an attempt to use an Optional type as an iterable value (e.g. within a for statement).","type":["string","boolean"],"default":"error"},"reportOptionalContextManager":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for an attempt to use an Optional type as a context manager (as a parameter to a with statement).","type":["string","boolean"],"default":"error"},"reportOptionalOperand":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for an attempt to use an Optional type as an operand to a binary or unary operator (like '+', '==', 'or', 'not').","type":["string","boolean"],"default":"error"},"reportImplicitOverride":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for overridden methods that do not include an `@override` decorator.","type":["string","boolean"],"default":"none"},"reportRedeclaration":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for an attempt to declare the type of a symbol multiple times.","type":["string","boolean"],"default":"error"},"reportShadowedImports":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for files that are overriding a module in the stdlib.","type":["string","boolean"],"default":"none"},"reportReturnType":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics related to function return type compatibility.","type":["string","boolean"],"default":"error"},"reportMatchNotExhaustive":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for 'match' statements that do not exhaustively match all possible values.","type":["string","boolean"],"default":"none"},"reportTypedDictNotRequiredAccess":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for an attempt to access a non-required key within a TypedDict without a check for its presence.","type":["string","boolean"],"default":"error"},"reportUnnecessaryTypeIgnoreComment":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for '# type: ignore' comments that have no effect.","type":["string","boolean"],"default":"none"},"reportUnusedExpression":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for simple expressions whose value is not used in any way.","type":["string","boolean"],"default":"warning"},"reportUnusedExcept":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for unreachable except clause.","type":["string","boolean"],"default":"error"},"reportUnusedCoroutine":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for call expressions that return a Coroutine and whose results are not consumed.","type":["string","boolean"],"default":"error"},"reportUnusedCallResult":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for call expressions whose results are not consumed and are not None.","type":["string","boolean"],"default":"none"},"reportUnsupportedDunderAll":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for unsupported operations performed on __all__.","type":["string","boolean"],"default":"warning"},"reportUntypedFunctionDecorator":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for function decorators that have no type annotations. These obscure the function type, defeating many type analysis features.","type":["string","boolean"],"default":"none"},"reportUnnecessaryCast":{"enum":["none","information","warning","error",true,false],"description":"Diagnostics for 'cast' calls that are statically determined to be unnecessary. Such calls are sometimes indicative of a programming error.","type":["string","boolean"],"default":"none"}},"description":"Allows a user to override the severity levels for individual diagnostics. Use the rule name as a key and one of \"error\", \"warning\", \"information\", \"none\", `true` (alias for \"error\") or `false` (alias for \"none\") as value. The default value shown for each diagnostic is the default when \"python.analysis.typeCheckingMode\" is set to \"standard\". See [here](https:\/\/github.com\/microsoft\/pyright\/blob\/main\/docs\/configuration.md#diagnostic-rule-defaults) for defaults for each type checking mode (\"off\", \"basic\", \"standard\", and \"strict\").","type":"object","scope":"resource"},"pyright.disableTaggedHints":{"scope":"resource","type":"boolean","description":"Disable hint diagnostics with special hints for grayed-out or strike-through text.","default":false},"python.analysis.autoImportCompletions":{"scope":"resource","type":"boolean","description":"Offer auto-import completions.","default":true}}}